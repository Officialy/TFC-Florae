import os
import json

directory = 'src/main/resources/assets/tfcflorae/blockstates/surface/ore'
templatedir = 'oreDepositsTemplate.json'
rockTypeStr = '${rockType}'
oreTypeStr = '${oreType}'

ROCK_TYPES = [
    'andesite',
    'arkose',
    'basalt',
    'blaimorite',
    'blueschist',
    'boninite',
    'carbonatite',
    'cataclasite',
    'chalk',
    'chert',
    'claystone',
    'conglomerate',
    'dacite',
    'diorite',
    'dolomite',
    'foidolite',
    'gabbro',
    'gneiss',
    'granite',
    'greenschist',
    'jaspillite',
    'limestone',
    'marble',
    'mylonite',
    'phyllite',
    'quartzite',
    'rhyolite',
    'rocksalt',
    'schist',
    'shale',
    'slate',
    'travertine',
    'wackestone',
	'breccia',
    'porphyry',
    'peridotite',
    'mudstone',
    'sandstone',
    'siltstone',
    'catlinite',
    'novaculite',
    'soapstone',
    'komatiite'
]

ORE_TYPES = [
    'adamantite',
    'anthracite',
    'baryte',
    'bastnaesite',
    'bauxite',
    'bertrandite',
    'bismuthinite',
    'bituminous_coal',
    'borax',
    'calaverite',
	'calcite',
    'carnallite',
    'cassiterite',
    'celestine',
    'chalcocite',
    'chalcopyrite',
    'chengdeite',
    'chromite',
    'cinnabar',
    'cobaltite',
    'columbite',
    'cooperite',
    'cryolite',
    'decrespignyite',
    'diomignite',
    'dzharkenite',
    'erlichmanite',
    'euxenite',
    'fergusonite',
    'fluorite',
    'gadolinite',
    'galena',
    'gallite',
    'garnierite',
    'geode_agate',
    'geode_amethyst',
    'geode_apatite',
    'geode_aquamarine',
    'geode_beryl',
    'geode_bromargyrite',
    'geode_citrine',
    'geode_diamond',
    'geode_emerald',
    'geode_garnet',
    'geode_heliodor',
    'geode_iodargyrite',
    'geode_jade',
    'geode_jasper',
    'geode_kyanite',
    'geode_moldavite',
    'geode_moonstone',
    'geode_opal',
    'geode_pyromorphite',
    'geode_quartz',
    'geode_ruby',
    'geode_sapphire',
    'geode_spinel',
    'geode_sunstone',
    'geode_tanzanite',
    'geode_topaz',
    'geode_tourmaline',
    'geode_zircon',
    'germanite',
    'graphite',
    'greenockite',
    'griceite',
    'gypsum',
    'hafnon',
    'halite',
    'hematite',
    'iodate',
    'iridosmium',
    'iwashiroite',
    'jet',
    'kaolinite',
    'kimberlite',
    'kozoite',
    'lapis_lazuli',
    'laurite',
    'lepidolite',
    'lignite',
    'limonite',
    'limoriite',
    'lithiophosphate',
    'livingstonite',
    'loparite',
    'lorandite',
    'magnesite',
    'magnetite',
    'malachite',
    'marshite',
    'miassite',
    'microcline',
    'moissanite',
    'molybdenite',
    'monazite',
    'native_ardite',
    'native_copper',
    'native_gold',
    'native_platinum',
    'native_rhodium',
    'native_silver',
    'olivine',
    'osmiridium',
    'paratooite',
    'pentlandite',
    'petrified_wood',
    'phosphorite',
    'pitchblende',
    'pollucite',
    'proshchenkoite',
    'pyrargyrite',
    'pyrite',
    'pyrolusite',
    'radiumbarite',
    'realgar',
    'rheniite',
    'roquesite',
    'rutheniridosmium',
    'rutile',
    'salammoniac',
    'saltpeter',
    'samarskite',
    'satinspar',
    'selenide',
    'selenite',
    'serpentine',
    'silica',
    'sphalerite',
    'spodumene',
    'stibnite',
    'sulfur',
    'sylvite',
    'tantalite',
    'tetrahedrite',
    'thorianite',
    'thortveitite',
    'ulexite',
    'uraninite',
    'vanadinite',
    'wolframite',
    'xenotime',
    'yftisite',
    'zircon'
]

def Parse(toLocation, oreType, rockType):
    rockFile = open(toLocation, 'w', encoding='utf-8')
    templateFile = open(templatedir, 'r', encoding='utf-8')
    templateLines = templateFile.readlines()

    fileData = []

    for line in templateLines:
        line = line.replace(oreTypeStr, oreType)
        line = line.replace(rockTypeStr, rockType)
        fileData.append(line)
    rockFile.writelines(fileData)


def structure():
    if os.path.isdir(directory):
        for oreType in ORE_TYPES:
            oreFileDir = directory + '/' + oreType
            if not os.path.isdir(oreFileDir):
                os.mkdir(oreFileDir)
            
            for rockType in ROCK_TYPES:
                rockFileLoc = oreFileDir + '/' + rockType + '.json'
                Parse(rockFileLoc, oreType, rockType)

structure()